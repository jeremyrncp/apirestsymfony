{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is an official API BileMo for consumer, please verify have a consumer account before use API. If don't have account, please contact our support at support@bilemo.com.\r\n For authentication, our API use a JWT token.",
    "version" : "1.0.0",
    "title" : "API BileMO",
    "contact" : {
      "email" : "developper@bilemo.com"
    }
  },
  "host" : "api.bilemo.com",
  "basePath" : "/api",
  "schemes" : [ "http" ],
  "paths" : {
    "/user" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch all users",
        "description" : "",
        "operationId" : "getAllUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Pagination start",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Users list paginated",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "406" : {
            "description" : "Not acceptable header"
          },
          "417" : {
            "description" : "Excepted header not found"
          }
        }
      },
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Add a new user",
        "description" : "",
        "operationId" : "addUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User that needs to be added in our user list",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User created",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "405" : {
            "description" : "Invalid input"
          },
          "406" : {
            "description" : "Not acceptable header"
          },
          "417" : {
            "description" : "Excepted header not found"
          },
          "426" : {
            "description" : "Unprocessable entity"
          }
        }
      }
    },
    "/user/{userId}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch user",
        "description" : "",
        "operationId" : "getUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "User informations",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "403" : {
            "description" : "User is forbidden"
          },
          "404" : {
            "description" : "User not found"
          },
          "406" : {
            "description" : "Not acceptable header"
          },
          "417" : {
            "description" : "Excepted header not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete an existing user",
        "description" : "Returns a single user",
        "operationId" : "deleteUser",
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of user",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "Delete successfull, no content returned"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "403" : {
            "description" : "User is forbidden"
          },
          "404" : {
            "description" : "User not found"
          },
          "406" : {
            "description" : "Not acceptable header"
          },
          "417" : {
            "description" : "Excepted header not found"
          }
        }
      }
    },
    "/phone" : {
      "get" : {
        "tags" : [ "phone" ],
        "summary" : "Find phones",
        "description" : "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId" : "getAllPhones",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Pagination start",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Phones list paginated",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Phone"
              }
            }
          },
          "406" : {
            "description" : "Not acceptable header"
          },
          "417" : {
            "description" : "Excepted header not found"
          }
        }
      }
    },
    "/phone/{phoneID}" : {
      "get" : {
        "tags" : [ "phone" ],
        "summary" : "Find phone by ID",
        "description" : "Returns a single phone",
        "operationId" : "getPetById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "phoneID",
          "in" : "path",
          "description" : "ID of phone to return",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Phone informations",
            "schema" : {
              "$ref" : "#/definitions/Phone"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Phone not found"
          },
          "406" : {
            "description" : "Not acceptable header"
          },
          "417" : {
            "description" : "Excepted header not found"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "Bearer" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    }
  },
  "definitions" : {
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "firstname" : {
          "type" : "string",
          "example" : "Martin"
        },
        "lastname" : {
          "type" : "string",
          "example" : "Dupont"
        },
        "email" : {
          "type" : "string",
          "example" : "dupont.martin@google.com"
        },
        "phonenumber" : {
          "type" : "string",
          "example" : "0101010101"
        },
        "address" : {
          "type" : "string",
          "example" : "Avenue des Champs Elys√©es"
        },
        "city" : {
          "type" : "string",
          "example" : "Paris"
        },
        "postalcode" : {
          "type" : "string",
          "example" : "75000"
        }
      }
    },
    "Phone" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "example" : "Iphone XS"
        },
        "price" : {
          "type" : "number",
          "example" : 755.2
        },
        "memory" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 128
        },
        "warranty" : {
          "type" : "integer",
          "example" : 2
        },
        "screensize" : {
          "type" : "string",
          "example" : "5 pouces"
        },
        "manufacturer" : {
          "type" : "string",
          "example" : "Apple"
        },
        "category" : {
          "type" : "string",
          "example" : "Neuf"
        },
        "os" : {
          "type" : "string",
          "example" : "IOS"
        },
        "connexions" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "example" : "4G"
          }
        },
        "description" : {
          "type" : "string",
          "example" : "L'Iphone XS est le nouveau smartphone d'Apple..."
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  }
}